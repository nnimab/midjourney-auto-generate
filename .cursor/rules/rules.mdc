---
description: main task
globs: 
---
要求
在理解用戶需求、設計 UI、編寫代碼、解決問題和項目迭代優化時，你應始終遵循以下原則：

項目初始化
閱讀與建立 README.md：在項目開始前，仔細閱讀項目目錄下的 README.md 文件，了解項目的目標、功能架構、技術棧和開發計劃；如果沒有 README.md，請主動創建一個，用以記錄應用功能模塊、頁面結構、數據流、依賴庫等信息。
需求理解
充分理解需求：開發一個 Python 腳本，利用 Selenium 自動化登入 Discord 並發送 /imagine 指令，搭配 Discord Bot 監控 Midjourney 回應，實現以下流程：

從 JSON 文件中讀取數據（卦象編號、卦象名稱、prompt）；
使用 Selenium 在 Discord 中發送 /imagine 指令；
Discord Bot 監控並等待 Midjourney 的回應，檢測到初步圖片生成後，模擬點擊 U1-U4 按鈕以進行圖片放大；
等待高清圖片生成後，下載圖片並根據 JSON 中的數據建立對應資料夾進行保存；
回傳下載完成狀態給 Selenium，再開始處理下一個 prompt。
需求待完善的部分：

Midjourney API 或第三方庫的具體使用方式（是否直接通過 Discord Bot 發送命令）；
Discord 機器人的權限與認證配置；
錯誤處理策略（如 Midjourney 生成失敗、Discord 連接問題、文件保存錯誤）；
進度反饋機制（告知用戶當前生成進度）；
是否需要支持並發處理（同時生成多個卦象圖片）；
用戶交互模式（命令行參數或簡單的 UI）；
Selenium 與 Discord Bot 之間的通信協調方式。
UI 和樣式設計
無圖形用戶界面：由於這是一個腳本應用，主要採用命令行交互和日誌輸出。
命令行參數：允許用戶指定 JSON 文件路徑、輸出目錄、Selenium 驅動配置等；
日誌輸出：在控制台顯示進度、錯誤信息及狀態反饋；
(可選) Discord 消息反饋：可將處理結果或進度通過 Discord 消息傳送給用戶。
代碼編寫
技術選型：

Python：主要編程語言；
requests 庫：用於與 Discord API 和 Midjourney API（或第三方庫）進行交互；
json 庫：用於讀取和解析 JSON 文件；
os 與 shutil 庫：用於文件與目錄操作；
Selenium：用於自動化登入 Discord、發送指令和模擬點擊 U1-U4 按鈕；
discord.py：用於建立 Discord Bot，監控訊息、點擊按鈕、下載圖片並回傳狀態；
asyncio 與 aiohttp（可選）：用於異步處理請求和事件。
Midjourney API 的選擇：

官方 API：如有提供則優先使用；
第三方庫：若官方 API 不可用，則尋找可靠的第三方封裝庫；
Discord Bot + Webhooks：通過 Discord Bot 發送命令到 Midjourney 頻道，並利用 Webhooks 或訊息事件捕捉生成圖片的 URL。
代碼結構：

模塊化設計：將代碼分解為多個模塊，例如：
config.py：存放配置（如 Discord Token、Midjourney API Key、Selenium 驅動參數、輸出目錄等）；
selenium_client.py：負責使用 Selenium 自動登入 Discord、導航至目標頻道、發送 /imagine 指令及模擬點擊 U1-U4 按鈕；
discord_bot.py：負責監控 Discord 中的訊息，等待 Midjourney 回應、點擊放大按鈕、下載高清圖片並回傳狀態；
image_processor.py：負責圖片下載、文件保存、資料夾管理；
main.py：主程序入口，負責讀取 JSON 文件、協調各模塊執行完整流程。
清晰的函數和類：每個函數或類應該有明確的職責，使用描述性名稱；
遵循 DRY 原則：避免重複代碼，將共用功能抽取為獨立函數或類。
代碼安全性：

敏感信息管理：不將 API 密鑰、Token 等敏感信息硬編碼，使用環境變量或配置文件管理；
用戶輸入驗證：對 JSON 文件路徑、命令行參數等進行驗證和清理；
使用 HTTPS：所有 API 調用均使用 HTTPS 進行安全通信。
性能優化：

異步處理：若需同時發送多個請求，可利用 asyncio 和 aiohttp 提高效率；
限制並發請求：避免同時發送過多請求，防止觸發速率限制或封禁；
緩存：可對部分數據（如 Midjourney 回應）進行緩存以減少重複請求。
測試與文檔：

單元測試：為每個模塊編寫單元測試，確保核心功能正確；
詳細注釋：在代碼中添加中文注釋，解釋邏輯和功能；
README 文件：提供詳細說明文檔，介紹安裝、配置和運行方法；
逐步測試策略：將整個流程拆分為獨立模塊，逐步測試各部分（如 Selenium 操作、Discord Bot 監控、圖片下載與保存），再進行整合測試，確保每一步操作均能穩定執行。
問題解決
全面學習相關技術：深入理解 Discord API、Midjourney API（或第三方庫）、Selenium 自動化及 JSON 處理的工作原理；
分析與討論：根據用戶反饋分析問題原因，提出解決思路並與用戶討論；
迭代調整：每次代碼修改應保持最小改動，確保不破壞既有功能。
迭代優化
與用戶密切溝通：根據反饋調整功能和設計，確保應用滿足用戶需求；
需求澄清：在需求不明確時主動詢問，確保技術細節達成一致；
持續更新文檔：每次迭代後更新 README 文件，記錄功能變更和優化建議；
分步調試與模組測試：採用逐步測試策略，先獨立驗證每個模塊，再進行整合測試，確保全流程穩定運行。
方法論
系統思維：以嚴謹的分析方法將需求拆解為可管理的小單元，逐步實現每個功能；
思維樹：評估各種解決方案及其影響，選擇最優路徑；
迭代改進：在最終確定代碼前，不斷優化和測試，確保最終解決方案既健壯又高效。
